name: Build Labels
on:
  push:
    branches:
      - feature-labels
    paths-ignore:
      - CHANGELOG.md

defaults:
  run:
    shell: pwsh

env:
  buildFolderName: output
  buildArtifactName: output
  testResultFolderName: testResults
  defaultBranch: main

jobs:
  Build_Stage_Package_Module:
    name: Package Module
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@main
        with:
          ref: ${{ github.head_ref }}
          fetch-depth: 0
      - name: Setup GitVersion
        uses: gittools/actions/gitversion/setup@v0
        with:
          versionSpec: "5.x"
      - name: Evaluate Next Version
        uses: gittools/actions/gitversion/execute@v0
        with:
          configFilePath: GitVersion.yml
      - name: Builde & Package Module
        env:
          ModuleVersion: ${{ env.gitVersion.NuGetVersionV2 }}
        run: |
          ./build.ps1 -ResolveDependency -Tasks pack -Verbose
      - name: Publish Build Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.buildArtifactName }}
          path: ${{ env.buildFolderName }}

  Test_Stage_test_windows_ps:
    name: Windows (Powershell)
    runs-on: windows-latest
    needs:
      - Build_Stage_Package_Module
    steps:
      - name: Checkout
        uses: actions/checkout@main
        with:
          ref: ${{ github.head_ref }}
          fetch-depth: 0
      - name: Download Build Artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ env.buildArtifactName }}
          path: ${{ env.buildFolderName }}
      - name: Run Tests
        shell: powershell
        run: |
          ./build.ps1 -Tasks test
      - name: Publish Test Results
        uses: actions/upload-artifact@v4
        if: success() || failure()
        # if: (${{ job.status }} != 'cancelled')
        with:
          path: ${{ env.buildFolderName }}/${{ env.testResultFolderName }}/NUnit*.xml
          name: Windows (Powershell)
      - name: Publish Test Artifact
        uses: actions/upload-artifact@v4
        if: success() || failure()
        # if: (${{ job.status }} != 'cancelled')
        with:
          path: ${{ env.buildFolderName }}/${{ env.testResultFolderName }}/
          name: CodeCoverageWinPS51

  Test_Stage_test_windows_core:
    name: Windows (PWSH)
    runs-on: windows-latest
    needs:
      - Build_Stage_Package_Module
    steps:
      - name: Checkout
        uses: actions/checkout@main
        with:
          ref: ${{ github.head_ref }}
          fetch-depth: 0
      - name: Download Build Artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ env.buildArtifactName }}
          path: ${{ env.buildFolderName }}
      - name: Run Tests
        run: |
          ./build.ps1 -Tasks test
      - name: Publish Test Results
        uses: actions/upload-artifact@v4
        if: success() || failure()
        # if: (${{ job.status }} != 'cancelled')
        with:
          path: ${{ env.buildFolderName }}/${{ env.testResultFolderName }}/NUnit*.xml
          name: Windows (PWSH)
      - name: Publish Test Artifact
        uses: actions/upload-artifact@v4
        if: success() || failure()
        # if: (${{ job.status }} != 'cancelled')
        with:
          path: ${{ env.buildFolderName }}/${{ env.testResultFolderName }}/
          name: CodeCoverageWinPWSH

  Test_Stage_test_linux:
    name: Linux
    runs-on: ubuntu-latest
    needs:
      - Build_Stage_Package_Module
    steps:
      - name: Checkout
        uses: actions/checkout@main
        with:
          ref: ${{ github.head_ref }}
          fetch-depth: 0
      - name: Download Build Artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ env.buildArtifactName }}
          path: ${{ env.buildFolderName }}
      - name: Run Tests
        run: |
          ./build.ps1 -Tasks test
      - name: Publish Test Results
        uses: actions/upload-artifact@v4
        if: success() || failure()
        # if: (${{ job.status }} != 'cancelled')
        with:
          path: ${{ env.buildFolderName }}/${{ env.testResultFolderName }}/NUnit*.xml
          name: Linux
      - name: Publish Test Artifact
        uses: actions/upload-artifact@v4
        if: success() || failure()
        # if: (${{ job.status }} != 'cancelled')
        with:
          path: ${{ env.buildFolderName }}/${{ env.testResultFolderName }}/
          name: CodeCoverageLinux

  Test_Stage_test_macos:
    name: MacOS
    runs-on: macos-latest
    needs:
      - Build_Stage_Package_Module
    steps:
      - name: Checkout
        uses: actions/checkout@main
        with:
          ref: ${{ github.head_ref }}
          fetch-depth: 0
      - name: Download Build Artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ env.buildArtifactName }}
          path: ${{ env.buildFolderName }}
      - name: Run Tests
        run: |
          ./build.ps1 -Tasks test
      - name: Publish Test Results
        uses: actions/upload-artifact@v4
        if: success() || failure()
        # if: (${{ job.status }} != 'cancelled')
        with:
          path: ${{ env.buildFolderName }}/${{ env.testResultFolderName }}/NUnit*.xml
          name: MacOS
      - name: Publish Test Artifact
        uses: actions/upload-artifact@v4
        if: success() || failure()
        # if: (${{ job.status }} != 'cancelled')
        with:
          path: ${{ env.buildFolderName }}/${{ env.testResultFolderName }}/
          name: CodeCoverageMacOS

  Test_Stage_Code_Coverage:
    name: Publish Code Coverage
    environment: GithubToken
    if: success() || failure()
    permissions:
      checks: write
      pull-requests: write
    runs-on: ubuntu-latest
    needs:
      - Build_Stage_Package_Module
      - Test_Stage_test_windows_ps
      - Test_Stage_test_windows_core
      - Test_Stage_test_linux
      - Test_Stage_test_macos
    steps:
      - name: Checkout
        uses: actions/checkout@main
        with:
          ref: ${{ github.head_ref }}
          fetch-depth: 0
      - name: Set Environment Variables
        run: |
          $repositoryOwner,$repositoryName = $env:GITHUB_REPOSITORY -split '/'
          echo "##vso[task.setvariable variable=RepositoryOwner;isOutput=true]$repositoryOwner"
          echo "##vso[task.setvariable variable=RepositoryName;isOutput=true]$repositoryName"
      - name: Download Pipeline Artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ env.buildArtifactName }}
          path: ${{ env.buildFolderName }}

      - name: Download Test Artifact Windows (Powershell)
        uses: actions/download-artifact@v4
        with:
          name: 'CodeCoverageWinPS51'
          path: ${{ env.buildFolderName }}/${{ env.testResultFolderName }}/CodeCoverageLinux/
      - name: Publish Windows (Powershell) Test Results
        id: winps51-test-results
        uses: EnricoMi/publish-unit-test-result-action@v2
        if: always()
        with:
          nunit_files: ${{ env.buildFolderName }}/${{ env.testResultFolderName }}/CodeCoverageWinPS51/NUnit*.xml
          check_name: Windows (Powershell) Test Result

      - name: Download Test Artifact Linux
        uses: actions/download-artifact@v4
        with:
          name: 'CodeCoverageLinux'
          path: ${{ env.buildFolderName }}/${{ env.testResultFolderName }}/CodeCoverageLinux/
      - name: Publish Linux Test Results
        id: linux-test-results
        uses: EnricoMi/publish-unit-test-result-action@v2
        if: always()
        with:
          nunit_files: ${{ env.buildFolderName }}/${{ env.testResultFolderName }}/CodeCoverageLinux/NUnit*.xml
          check_name: Linux Test Result
      - name: "Run"
        run: |
          echo '${{ toJSON(steps) }}'
      - name: Set Linux badge color
        shell: bash
        run: |
          case ${{ fromJSON( steps.linux-test-results.outputs.json ).conclusion }} in
            success)
              echo "LINUXBADGE_COLOR=31c653" >> $GITHUB_ENV
              ;;
            failure)
              echo "LINUXBADGE_COLOR=800000" >> $GITHUB_ENV
              ;;
            neutral)
              echo "LINUXBADGE_COLOR=696969" >> $GITHUB_ENV
              ;;
            esac
      - name: "Sec"
        env:
          SS: ${{ secrets.GithubToken }}
          SSS: ${{ secrets.GITHUBTOKEN }}
          SSSS: "Dolores Ipsum"
        run: |
          echo ("=" * 20)
          echo "$env:SS"
          echo ("=" * 20)
          echo "$env:SSS"
          echo ("=" * 20)
          echo "${{ secrets.GITHUBTOKEN }}"
          echo ("=" * 20)
          echo '${{ secrets.GITHUB_TOKEN }}'
          echo ("=" * 20)
      - name: Create Linux badge
        uses: emibcn/badge-action@v2.0.2
        with:
          label: Tests
          status: '${{ fromJSON( steps.linux-test-results.outputs.json ).formatted.stats.tests }} tests, ${{ fromJSON( steps.linux-test-results.outputs.json ).formatted.stats.runs }} runs: ${{ fromJSON( steps.linux-test-results.outputs.json ).conclusion }}'
          color: ${{ env.LINUXBADGE_COLOR }}
          path: linux-badge.svg
      - name: Upload Linux badge to Gist
        # if: >
        #   github.event_name == 'workflow_run' && github.event.workflow_run.head_branch == 'main' || github.event_name != 'workflow_run' && github.ref == 'refs/heads/main'
        uses: andymckay/append-gist-action@0.2
        with:
          token: ${{ secrets.GithubToken }}
          gistURL: https://gist.githubusercontent.com/Proud-Rabbit/79ca127fedb0c195b29ceebd5a963a13
          file: linux-badge.svg
